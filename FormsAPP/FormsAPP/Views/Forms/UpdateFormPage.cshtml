@using FormsAPP.Models.Forms
@using FormsAPP.Models.Forms.CRUD
@model UpdateFormModel
@{
    Layout = null;

    var Topics = new Dictionary<int, string> { { 1, "Education" }, { 2, "Quiz" }, { 3, "Other" } };
    var Accessibility = new Dictionary<int, string> { { 0, "Public" }, { 1, "Restricted" } };
    var QuestionTypes = new Dictionary<int, string> {
        {1,"Text (Short Answer)"},
        {2,"Paragraph (Long Answer)"},
        {3,"Number"},
        {4,"Checkboxes"}
    };
    SelectList TopicItems = new SelectList(Topics, "Key", "Value");
    SelectList AccessibilityItems = new SelectList(Accessibility, "Key", "Value");
    SelectList QuestionTypeItems = new SelectList(QuestionTypes, "Key", "Value");
}

<!DOCTYPE html>
<html>
<head>
    <title>Edit Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .tag-item {
            display: inline-block;
            background: #e9ecef;
            padding: 5px 10px;
            border-radius: 20px;
            margin-right: 5px;
            margin-bottom: 5px;
        }

        .tag-remove {
            cursor: pointer;
            margin-left: 5px;
        }

        .question-card {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #f8f9fa;
        }

        .option-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .drag-handle {
            cursor: move;
            margin-right: 10px;
        }

        .image-preview {
            max-width: 200px;
            max-height: 200px;
            margin-top: 10px;
        }

        .hidden {
            display: none;
        }

        .question-type-badge {
            font-size: 0.8rem;
            margin-left: 10px;
            color: #6c757d;
        }

        #tagSuggestions, #userSuggestions {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            max-height: 200px;
            overflow-y: auto;
            display: none;
            width: calc(100% - 24px);
        }

        .suggestion-item, .user-suggestion-item {
            padding: 8px 12px;
            cursor: pointer;
        }

            .suggestion-item:hover, .user-suggestion-item:hover {
                background-color: #f8f9fa;
            }
    </style>
</head>
<body>
    <div class="container mt-4 mb-4" >
        <h2>Edit Form</h2>

        @if (!string.IsNullOrEmpty(ViewData["ErrorMessage"]?.ToString()))
        {
            <div class="alert alert-danger" role="alert">
                @ViewData["ErrorMessage"]
            </div>
        }

        <form asp-action="UpdateForm" method="post" enctype="multipart/form-data" id="updateForm">
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="UserId" />
            <input type="hidden" name="CreatedAt" value="@Model.CreatedAt.ToString("O")" />
            <input type="hidden" asp-for="Version" />
            <input type="hidden" id="newTagsInput" asp-for="NewTags" />

            <div class="mb-3">
                <label class="form-label">Title</label>
                <input type="text" class="form-control" asp-for="Title" required>
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" asp-for="Description" rows="3"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Image</label>
                <input type="file" asp-for="ImageFile" class="form-control" id="imageUpload" accept="image/*">
                <input type="hidden" asp-for="ImageUrl">
                <div id="imagePreviewContainer" class="mt-2">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img id="imagePreview" class="image-preview" src="@Model.ImageUrl">
                    }
                    else
                    {
                        <img id="imagePreview" class="image-preview" src="" style="display: none;">
                    }
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Topic</label>
                <select class="form-select" asp-for="TopicId" asp-items="@TopicItems" required></select>
            </div>

            <div class="mb-3">
                <label class="form-label">Accessibility</label>
                <select class="form-select" asp-for="Accessibility" id="accessibilitySelect" asp-items="@AccessibilityItems" required></select>
                <div id="restrictedUsersContainer" class="mt-3 @(Model.Accessibility == 1 ? "" : "hidden")">
                    <label class="form-label">Allowed Users</label>
                    <div class="input-group mb-3" style="position: relative;">
                        <input type="text" class="form-control" id="userSearchInput" placeholder="Search users">
                        <button class="btn btn-outline-secondary" type="button" id="addUserBtn">Add</button>
                        <div id="userSuggestions"></div>
                    </div>
                    <div id="allowedUsersList" class="mb-3">
                        @for (int i = 0; i < Model.AccessFormUsers.Count; i++)
                        {
                            <div class="tag-item">
                                @Model.AccessFormUsers[i].Email
                                <input type="hidden" name="AccessFormUsers[@i].Email" value="@Model.AccessFormUsers[i].Email">
                                <input type="hidden" name="AccessFormUsers[@i].Id" value="@Model.AccessFormUsers[i].Id">
                                <input type="hidden" name="AccessFormUsers[@i].UserId" value="@Model.AccessFormUsers[i].Userid">
                                <span class="tag-remove" data-index="@i"><i class="fas fa-times"></i></span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Tags</label>
                <div class="input-group mb-3" style="position: relative;">
                    <input type="text" class="form-control" id="tagInput" placeholder="Add tag and press Enter">
                    <div id="tagSuggestions"></div>
                </div>
                <div id="tagsContainer" class="mb-3">
                    @for (int i = 0; i < Model.FormTags.Count; i++)
                    {
                        <div class="tag-item">
                            @Model.FormTags[i].Name
                            <input type="hidden" name="FormTags[@i].Id" value="@Model.FormTags[i].Id">
                            <input type="hidden" name="FormTags[@i].TagId" value="@Model.FormTags[i].TagId">
                            <input type="hidden" name="FormTags[@i].Name" value="@Model.FormTags[i].Name">
                            <span class="tag-remove" data-index="@i"><i class="fas fa-times"></i></span>
                        </div>
                    }
                </div>
            </div>

            <div class="mb-3">
                <h4>Questions</h4>
                <div id="questionsContainer">
                    @for (int i = 0; i < Model.Questions.Count; i++)
                    {
                        var question = Model.Questions[i];
                        <div class="question-card" data-question-type="@question.QuestionTypeId">
                            <div class="d-flex justify-content-between mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-grip-vertical drag-handle"></i>
                                    <h5 class="question-title mb-0">Question @(i + 1) <span class="question-type-badge">@QuestionTypes[question.QuestionTypeId]</span></h5>
                                </div>
                                <button type="button" class="btn btn-sm btn-danger delete-question"><i class="fas fa-trash"></i></button>
                            </div>
                            <input type="hidden" asp-for="Questions[i].Id" />
                            <input type="hidden" class="question-position" name="Questions[@i].Position" value="@i">
                            <div class="mb-3">
                                <label class="form-label">Question Type</label>
                                <select class="form-select question-type" asp-for="Questions[i].QuestionTypeId"
                                        asp-items="@(new SelectList(QuestionTypes, "Key", "Value"))"></select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Question Text</label>
                                <input type="text" class="form-control question-text" asp-for="Questions[i].Question" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control question-description" asp-for="Questions[i].Description" rows="2"></textarea>
                            </div>
                            <div class="options-container mb-3">
                                @if (question.QuestionTypeId == 4)
                                {
                                    <label class="form-label">Options</label>
                                    @for (int j = 0; j < question.Options.Count; j++)
                                    {
                                        <div class="option-item">
                                            <input type="hidden" asp-for="Questions[i].Options[j].Id" />
                                            <input type="text" class="form-control option-value"
                                                   asp-for="Questions[i].Options[j].OptionValue" required>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-option">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    }
                                }
                            </div>
                            @if (question.QuestionTypeId == 4)
                            {
                                <button type="button" class="btn btn-sm btn-outline-primary add-option">Add Option</button>
                            }
                        </div>
                    }
                </div>
                <div class="dropdown mt-3">
                    <button class="btn btn-primary dropdown-toggle" type="button" id="addQuestionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Add Question
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="addQuestionDropdown">
                        @foreach (var item in QuestionTypeItems)
                        {
                            <li><a class="dropdown-item" href="#" data-type="@item.Value">@item.Text</a></li>
                        }
                    </ul>
                </div>
            </div>

            <input type="submit" class="btn btn-success" value="Submit Changes" />
        </form>
    </div>

    <!-- Question Template (hidden) -->
    <template id="questionTemplate">
        <div class="question-card">
            <div class="d-flex justify-content-between mb-3">
                <div class="d-flex align-items-center">
                    <i class="fas fa-grip-vertical drag-handle"></i>
                    <h5 class="question-title mb-0">Question <span class="question-type-badge"></span></h5>
                </div>
                <button type="button" class="btn btn-sm btn-danger delete-question"><i class="fas fa-trash"></i></button>
            </div>
            <input type="hidden" class="question-id" name="Questions[0].Id" value="0">
            <input type="hidden" class="question-position" name="Questions[0].Position" value="0">
            <div class="mb-3">
                <label class="form-label">Question Type</label>
                <select class="form-select question-type" name="Questions[0].QuestionTypeId">
                    @foreach (var item in QuestionTypeItems)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Question Text</label>
                <input type="text" class="form-control question-text" name="Questions[0].Question" required>
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control question-description" name="Questions[0].Description" rows="2"></textarea>
            </div>
            <div class="options-container mb-3"></div>
            <button type="button" class="btn btn-sm btn-outline-primary add-option hidden">Add Option</button>
        </div>
    </template>

    <!-- Option Template (hidden) -->
    <template id="optionTemplate">
        <div class="option-item">
            <input type="text" class="form-control option-value" required>
            <button type="button" class="btn btn-sm btn-outline-danger remove-option"><i class="fas fa-times"></i></button>
        </div>
    </template>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
     $(document).ready(function() {
        const questionTypes = {
            @foreach (var item in QuestionTypeItems)
            {
                @Html.Raw($"{item.Value}: '{item.Text}',")
            }
        };

        // Initialize data
        let existingTags = @Html.Raw(Json.Serialize(Model.FormTags.Select(t => new { t.Id, t.Name })));
        let tags = [...existingTags]; // Copy the existing tags
        let allowedUsers = @Html.Raw(Json.Serialize(Model.AccessFormUsers.Select(u => new { Id = u.Id, UserId = u.Userid, Email = u.Email }).ToList()));
        let questionCounter = @Model.Questions.Count;

        // Initialize new tags array
        let newTags = [];
        $('#newTagsInput').val(JSON.stringify(newTags));

        // Tags functionality with suggestions
        $('#tagInput').on('input', debounce(function() {
            const query = $(this).val().trim();
            if (query.length >= 2) {
                fetchTagSuggestions(query);
            } else {
                $('#tagSuggestions').hide().empty();
            }
        }, 300));

        $('#tagInput').on('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const tagText = $(this).val().trim();
                if (tagText && !tags.some(t => t.Name === tagText)) {
                    // Add as new tag (without ID)
                    newTags.push(tagText);
                    tags.push({ Id: 0, Name: tagText });
                    updateTagsDisplay();
                    $(this).val('');
                    $('#tagSuggestions').hide().empty();
                }
            }
        });

        function fetchTagSuggestions(query) {
                $.get('/Forms/FilterTagsByName', { query: query })
                .done(function(data) {
                    $('#tagSuggestions').empty();
                    data.forEach(tag => {
                        if (!tags.some(t => t.Name === tag.name)) {
                            $('#tagSuggestions').append(`
                                    <div class="suggestion-item" data-tag-id="${tag.id}" data-tag-tagId="${tag.tagId}" data-tag-name="${tag.name}">
                                    ${tag.name}
                                </div>
                            `);
                        }
                    });
                    if ($('#tagSuggestions').children().length > 0) {
                        $('#tagSuggestions').show();
                    }
                })
                .fail(() => console.error('Error fetching tags'));
        }

        $('#tagSuggestions').on('click', '.suggestion-item', function() {
            const Id = $(this).data('tag-id');
            const tagId = $(this).data('tag-tagId');
            const tagName = $(this).data('tag-name');

            if (!tags.some(t => t.Id === Id)) {
                tags.push({ Id: Id, TagId: tagid, Name: tagName });
                updateTagsDisplay();
                $('#tagInput').val('');
                $('#tagSuggestions').hide().empty();
            }
        });

        function updateTagsDisplay() {
            $('#tagsContainer').empty();
            // Update new tags (only those that don't have IDs)
            newTags = tags.filter(t => t.Id === 0).map(t => t.Name);
            $('#newTagsInput').val(JSON.stringify(newTags));

            tags.forEach((tag, index) => {
                $('#tagsContainer').append(`
                    <div class="tag-item">
                        ${tag.Name}
                        <input type="hidden" name="FormTags[${index}].Id" value="${tag.Id}">
                        <input type="hidden" name="FormTags[${index}].TagId" value="${tag.TagId}">
                        <input type="hidden" name="FormTags[${index}].Name" value="${tag.Name}">
                        <span class="tag-remove" data-index="${index}"><i class="fas fa-times"></i></span>
                    </div>
                `);
            });
        }

        $('#tagsContainer').on('click', '.tag-remove', function() {
            const index = $(this).data('index');
            const tag = tags[index];
            
            // Remove from newTags if it was a new tag
            if (tag.Id === 0) {
                newTags = newTags.filter(t => t !== tag.Name);
                $('#newTagsInput').val(JSON.stringify(newTags));
            }
            
            tags.splice(index, 1);
            updateTagsDisplay();
        });

        // Users functionality
        $('#userSearchInput').on('input', debounce(function() {
            const query = $(this).val().trim();
            if (query.length >= 2) {
                fetchUserSuggestions(query);
            } else {
                $('#userSuggestions').hide().empty();
            }
        }, 300));

        $('#addUserBtn').click(function() {
            const email = $('#userSearchInput').val().trim();
            if (email && !allowedUsers.some(u => u.Email === email)) {
                allowedUsers.push({
                    Id: 0,
                    UserId: 0,
                    Email: email
                });
                updateAllowedUsersDisplay();
                $('#userSearchInput').val('');
                $('#userSuggestions').hide().empty();
            }
        });

        function fetchUserSuggestions(query) {
            $.get('/Forms/FilterUsersbyEmail', { query: query })
                .done(function(data) {
                    $('#userSuggestions').empty();
                    data.forEach(user => {
                        if (!allowedUsers.some(u => u.Email === user.email)) {
                            $('#userSuggestions').append(`
                                <div class="user-suggestion-item" data-user-id="${user.id}" data-user-email="${user.email}">
                                    ${user.email}
                                </div>
                            `);
                        }
                    });
                    if ($('#userSuggestions').children().length > 0) {
                        $('#userSuggestions').show();
                    }
                })
                .fail(() => console.error('Error fetching users'));
        }

        $('#userSuggestions').on('click', '.user-suggestion-item', function() {
            const userId = $(this).data('user-id');
            const email = $(this).data('user-email');

            if (!allowedUsers.some(u => u.UserId === userId)) {
                allowedUsers.push({
                    Id: 0,
                    UserId: userId,
                    Email: email
                });
                updateAllowedUsersDisplay();
                $('#userSearchInput').val('');
                $('#userSuggestions').hide().empty();
            }
        });

        function updateAllowedUsersDisplay() {
            $('#allowedUsersList').empty();
            allowedUsers.forEach((user, index) => {
                $('#allowedUsersList').append(`
                    <div class="tag-item">
                        ${user.Email}
                        <input type="hidden" name="AccessFormUsers[${index}].Id" value="${user.Id}">
                        <input type="hidden" name="AccessFormUsers[${index}].UserId" value="${user.UserId}">
                        <span class="tag-remove" data-index="${index}"><i class="fas fa-times"></i></span>
                    </div>
                `);
            });
        }

        $('#allowedUsersList').on('click', '.tag-remove', function() {
            const index = $(this).data('index');
            allowedUsers.splice(index, 1);
            updateAllowedUsersDisplay();
        });

        // Questions functionality
        $('.dropdown-item[data-type]').click(function(e) {
            e.preventDefault();
            const questionTypeId = $(this).data('type');
            addQuestion(parseInt(questionTypeId));
        });

        function addQuestion(questionTypeId) {
            const $template = $('#questionTemplate').html();
            const $newQuestion = $($template);
            const newIndex = questionCounter++;

            $newQuestion.find('.question-position').val(newIndex);
            $newQuestion.find('.question-type').val(questionTypeId);
            $newQuestion.find('.question-type-badge').text(questionTypes[questionTypeId]);

            // Update all field names with the new index
            $newQuestion.find('[name]').each(function() {
                const name = $(this).attr('name').replace('[0]', `[${newIndex}]`);
                $(this).attr('name', name);
            });

            // Show add option button only for checkbox questions
            if (questionTypeId === 4) {
                $newQuestion.find('.add-option').removeClass('hidden');
                // Add initial options
                addOption($newQuestion.find('.options-container'), newIndex, 0);
                addOption($newQuestion.find('.options-container'), newIndex, 1);
            }

            $('#questionsContainer').append($newQuestion);
            updateQuestionPositions();
        }

        function addOption($container, questionIndex, optionIndex) {
            const $option = $('#optionTemplate').html();
            const $newOption = $($option);
            
            $newOption.find('.option-value')
                .attr('name', `Questions[${questionIndex}].Options[${optionIndex}].OptionValue`)
                .attr('required', true);

            $container.append($newOption);
        }

        function updateQuestionPositions() {
            $('.question-card').each(function(index) {
                const currentIndex = index;
                $(this).find('.question-position').val(currentIndex);
                
                // Update question number display
                $(this).find('.question-title').text(`Question ${currentIndex + 1}`);
                
                // Update all field names with the current index
                $(this).find('[name]').each(function() {
                    const name = $(this).attr('name').replace(/Questions\[\d+\]/g, `Questions[${currentIndex}]`);
                    $(this).attr('name', name);
                    
                    // Special handling for options
                    if (name.includes('Options')) {
                        const optionMatch = name.match(/Options\[(\d+)\]/);
                        if (optionMatch) {
                            const newName = name.replace(/Options\[\d+\]/g, `Options[${optionMatch[1]}]`);
                            $(this).attr('name', newName);
                        }
                    }
                });
            });
        }

        // Event delegation for dynamic elements
        $('#questionsContainer')
            .on('click', '.add-option', function() {
                const $card = $(this).closest('.question-card');
                const questionIndex = $('.question-card').index($card);
                const optionIndex = $card.find('.option-item').length;
                addOption($card.find('.options-container'), questionIndex, optionIndex);
            })
            .on('click', '.remove-option', function() {
                $(this).closest('.option-item').remove();
                updateQuestionPositions();
            })
            .on('click', '.delete-question', function() {
                $(this).closest('.question-card').remove();
                updateQuestionPositions();
            })
            .on('change', '.question-type', function() {
                const $card = $(this).closest('.question-card');
                const questionTypeId = parseInt($(this).val());
                const $optionsContainer = $card.find('.options-container');
                const $addOptionBtn = $card.find('.add-option');

                $card.attr('data-question-type', questionTypeId);
                $card.find('.question-type-badge').text(questionTypes[questionTypeId]);

                if (questionTypeId === 4) {
                    $addOptionBtn.removeClass('hidden');
                    if ($optionsContainer.find('.option-item').length === 0) {
                        addOption($optionsContainer, $('.question-card').index($card), 0);
                        addOption($optionsContainer, $('.question-card').index($card), 1);
                    }
                } else {
                    $addOptionBtn.addClass('hidden');
                    $optionsContainer.empty();
                }
            });

        // Close suggestions when clicking outside
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#tagInput, #tagSuggestions').length) {
                $('#tagSuggestions').hide();
            }
            if (!$(e.target).closest('#userSearchInput, #userSuggestions').length) {
                $('#userSuggestions').hide();
            }
        });

        // Helper function
        function debounce(func, wait) {
            let timeout;
            return function() {
                const context = this, args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }
    });
</script>
</body>
</html>