@using FormsAPP.Models.FormAnswers
@model IEnumerable<AnsweredFormModel>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<head>
    <style>
        .formImage {
            max-width: 200px;
            max-height: 256px;
            min-width: 100px;
            min-height: 80px;
            object-fit: cover;
            margin-bottom: 10px;
        }

        .toast-container {
            position: fixed;
            top: 50px;
            right: 20px;
            z-index: 1000;
        }

        .toast {
            padding: 15px 20px;
            margin-bottom: 10px;
            border-radius: 5px;
            color: white;
            opacity: 0;
            transform: translateX(100%);
            transition: opacity 0.3s, transform 0.3s;
            max-width: 300px;
        }

            .toast.show {
                opacity: 1;
                transform: translateX(0);
            }

            .toast.success {
                background-color: #28a745;
            }

            .toast.error {
                background-color: #dc3545;
            }

            .toast.warning {
                background-color: #ffc107;
                color: #212529;
            }

        .like-btn {
            width: auto;
            padding: 0.25rem 0.5rem;
            margin-top: 10px;
            display: inline-block;
            float: left;
        }

        .test-btn {
            padding: 0.25rem 0.5rem;
            margin-top: 10px;
            display: inline-block;
        }

        .comment-container {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 15px;
            background-color: #f8f9fa;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            padding-bottom: 5px;
            border-bottom: 1px solid #e9ecef;
        }

        .comment-author {
            font-weight: bold;
            color: #495057;
        }

        .comment-date {
            color: #6c757d;
            font-size: 0.9em;
        }

        .comment-text {
            padding-top: 5px;
            color: #212529;
        }

        .details-content {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .form-details {
            flex: 1;
            min-width: 300px;
            display: flex;
        }

        .image-section {
            margin-right: 20px;
        }

        .info-section {
            overflow: hidden;
            flex: 1;
        }

        .comments-section {
            flex: 1;
            min-width: 350px;
        }

        .comment-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1050;
            justify-content: center;
            align-items: center;
        }

        .comment-modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            width: 500px;
            max-width: 90%;
        }

        .comment-modal-footer {
            display: flex;
            justify-content: flex-end;
            margin-top: 15px;
        }
    </style>
</head>

<body>
    <div class="toast-container" id="toastContainer"></div>

    <div class="comment-modal" id="commentModal">
        <div class="comment-modal-content">
            <h4>Add Comment</h4>
            <input id="formId" hidden />
            <textarea id="commentText" class="form-control" rows="5" placeholder="Enter your comment here..."></textarea>
            <div class="comment-modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeCommentModal()">Cancel</button>
                <button type="button" class="btn btn-primary ms-2" onclick="submitComment()">Submit</button>
            </div>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
    {
        <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }
    <table class="table" id="formsTableId">
        <thead>
            <tr>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.Form!.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Form!.User!.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Form!.Topic)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Form!.Accessibility)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AsnweredAt)
                </th>
            </tr>
        </thead>
        <tbody id="formsTbodyId">
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        <details>
                            <summary class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-caret-down"></i>
                            </summary>
                        </details>
                    </td>
                    <td style="max-width:200px;">
                        @Html.DisplayFor(modelItem => item.Form!.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Form!.User!.Surname) @Html.DisplayFor(modelItem => item.Form!.User!.Name)
                        <p>@item.Form!.User!.Email</p>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Form!.Topic)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Form!.Accessibility)
                    </td>
                    <td title="@DateOnly.Parse(item.AsnweredAt!)">
                        @item.AsnweredAt
                    </td>
                </tr>
                <tr class="details-row" style="display: none;" data-form-id="@item.Form!.Id">
                    <td colspan="6">
                        <div class="details-content p-4">
                            <div class="form-details">
                                <div class="image-section">
                                    @if (!string.IsNullOrEmpty(item.Form!.ImageUrl))
                                    {
                                        <img class="formImage" src="@item.Form!.ImageUrl" />
                                    }
                                    else
                                    {
                                        <img class="formImage" src="~/images/forms_icon.webp" />
                                    }
                                </div>
                                <div class="info-section">
                                    <h4>@item.Form!.Title</h4>
                                    <h4>Created by: @item.Form!.User.Surname @item.Form!.User.Name</h4>
                                    <p class="mt-3">@item.Form!.Description</p>
                                    <button class="btn btn-outline-primary like-btn " onclick="likeAction(@item.Form!.Id)">
                                        <i class="fas fa-thumbs-up"> @item.Form!.LikesCount</i>
                                    </button>

                                    <a class="btn btn-warning test-btn mx-4" asp-controller="Forms" asp-action="UpdateAnswerPage" asp-route-answerId="@item.AnswerId">Change answer</a>

                                </div>
                            </div>
                            <div class="comments-section" data-form-id="@item.Form!.Id">
                                <button type="button" class="btn btn-light border-secondary mb-3" onclick="openCommentModal(@item.Form!.Id)">Add Comment</button>
                                <h4>Comments</h4>
                                @foreach (var comment in item.Form!.Comments)
                                {
                                    <div class="comment-container">
                                        <div class="comment-header">
                                            <span class="comment-author">@comment.UserName</span>
                                            <span class="comment-date">@comment.CreatedAt</span>
                                        </div>
                                        <div class="comment-text">@comment.Text</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
<script src="_framework/aspnetcore-browser-refresh.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    let isLoading = false;
    let hasMoreData = true;
    let batch = 1;
    const userId = @(Context.Session.GetInt32("UserId") ?? 0);

    const connectionHub = new signalR.HubConnectionBuilder().withUrl("/formshub").build();
    connectionHub.on("CommentAction", function(comment, formId){
        addCommentToUI(comment, formId);
    });
    connectionHub.on("LikeAction", function(formId, likesCount){
        const likeButton = document.querySelector(`button[onclick="likeAction(${formId})"] i`);
        likeButton.textContent = ` ${likesCount}`;
    });
    connectionHub.on("FormCreatedAction", function(form){
        appendForms([form]);

    });
    connectionHub.start().catch(err => console.error(err.toString()));

    function openCommentModal(formId) {

        if (!userId) {
            showToast("Non Authorized Action", "error");
            return;
        }
        document.getElementById('formId').value = formId;
        document.getElementById('commentModal').style.display = 'flex';
        document.getElementById('commentText').focus();
    }

    function closeCommentModal() {
        document.getElementById('commentModal').style.display = 'none';
        document.getElementById('commentText').value = '';
    }

    async function submitComment() {
        const formId = document.getElementById('formId').value;
        const commentText = document.getElementById('commentText').value.trim();
        if (!commentText) {
            showToast("Comment cannot be empty", "error");
            return;
        }

        const userId = @(Context.Session.GetInt32("UserId") ?? 0);
        if (!userId) {
            showToast("Non Authorized Action", "error");
            return;
        }

        const commentModel = {
            FormId: formId,
            UserId: userId,
            Text: commentText
        };

        try {
            const response = await fetch('/Forms/CommentAction', {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(commentModel)
            });

            if (response.ok) {
                const newComment = await response.json();
                showToast("Comment added successfully", "success");
                closeCommentModal();
            } else {
                showToast("Failed to add comment", "error");
            }
        } catch (error) {
            console.error("Error:", error);
            showToast("An error occurred", "error");
        }
    }

    function addCommentToUI(comment, formId) {
        const commentsSection = document.querySelector(`.comments-section[data-form-id="${formId}"]`);

        if (commentsSection) {
            const commentElement = document.createElement('div');
            commentElement.className = 'comment-container';
            commentElement.innerHTML = `
                <div class="comment-header">
                    <span class="comment-author">${comment.userName}</span>
                    <span class="comment-date">${comment.createdAt}</span>
                </div>
                <div class="comment-text">${comment.text}</div>
            `;
            commentsSection.appendChild(commentElement);
        }
    }

    window.addEventListener('scroll', async () => {
        if (isLoading || !hasMoreData) return;

        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
            await loadMoreForms();
        }
    });

    document.querySelectorAll('details').forEach(details => {
        details.addEventListener('toggle', () => {
            const detailsRow = details.closest('tr').nextElementSibling;
            detailsRow.style.display = details.open ? 'table-row' : 'none';
        });
    });

    function attachDetailsToggleHandlers() {
        document.querySelectorAll('#formsTbodyId').forEach(details => {
            if (!details.dataset.toggleBound) {
                details.addEventListener('toggle', () => {
                    const detailsRow = details.closest('tr').nextElementSibling;
                    detailsRow.style.display = details.open ? 'table-row' : 'none';
                });
                details.dataset.toggleBound = 'true';
            }
        });
    }

    async function likeAction(formId) {
        try {
            if (!userId) {
                showToast("Non Authorized Action", "error");
                return;
            }

            const likeModel = { FormId: formId, UserId: userId };
            const response = await fetch("/Forms/LikeAction", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(likeModel),
            });

            if (response.ok) {
                const updatedLikesCount = await response.json();
                const likeButton = document.querySelector(`button[onclick="likeAction(${formId})"] i`);
                likeButton.textContent = ` ${updatedLikesCount}`;
            } else {
                showToast("An Error occurred", "error");
            }
        } catch (error) {
            console.error("Error:", error);
            showToast("An Error occurred", "error");
        }
    }

    function showToast(message, type = "success") {
        const toastContainer = document.getElementById("toastContainer");
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.textContent = message;
        toastContainer.appendChild(toast);

        setTimeout(() => toast.classList.add("show"), 10);

        setTimeout(() => {
            toast.classList.remove("show");
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
</script>