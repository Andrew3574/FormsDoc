// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Enums;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories.Data;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(FormsDbContext))]
    [Migration("20250616104837_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "accessibility", new[] { "public", "restricted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "user", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "state", new[] { "active", "blocked" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.AccessformUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("accessform_users_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "FormId", "UserId" }, "accessform_users_form_id_user_id_key")
                        .IsUnique();

                    b.ToTable("accessform_users", (string)null);
                });

            modelBuilder.Entity("Models.CheckboxAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Answer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("answer");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<int?>("FormQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("form_question_id");

                    b.HasKey("Id")
                        .HasName("checkbox_answers_pkey");

                    b.HasIndex("AnswerId");

                    b.HasIndex("FormQuestionId");

                    b.ToTable("checkbox_answers", (string)null);
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("comments_pkey");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<FormAccessibility>("Accessibility")
                        .HasColumnType("accessibility")
                        .HasColumnName("accessibility");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("forms_pkey");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("forms", (string)null);
                });

            modelBuilder.Entity("Models.FormAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AsnweredAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("asnwered_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("form_answers_pkey");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("form_answers", (string)null);
                });

            modelBuilder.Entity("Models.FormQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("DisplayState")
                        .HasColumnType("boolean")
                        .HasColumnName("display_state");

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("question_type_id");

                    b.HasKey("Id")
                        .HasName("form_questions_pkey");

                    b.HasIndex("FormId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("form_questions", (string)null);
                });

            modelBuilder.Entity("Models.FormQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("form_question_id");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("option_value");

                    b.HasKey("Id")
                        .HasName("form_question_options_pkey");

                    b.HasIndex("FormQuestionId");

                    b.ToTable("form_question_options", (string)null);
                });

            modelBuilder.Entity("Models.FormTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("formtags_pkey");

                    b.HasIndex("FormId");

                    b.HasIndex("TagId");

                    b.ToTable("form_tags", (string)null);
                });

            modelBuilder.Entity("Models.IntegerAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Answer")
                        .HasColumnType("integer")
                        .HasColumnName("answer");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<int?>("FormQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("form_question_id");

                    b.HasKey("Id")
                        .HasName("integer_answers_pkey");

                    b.HasIndex("AnswerId");

                    b.HasIndex("FormQuestionId");

                    b.ToTable("integer_answers", (string)null);
                });

            modelBuilder.Entity("Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("likes_pkey");

                    b.HasIndex("FormId");

                    b.HasIndex(new[] { "UserId", "FormId" }, "likes_user_id_form_id_key")
                        .IsUnique();

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Models.LongTextAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("answer");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<int?>("FormQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("form_question_id");

                    b.HasKey("Id")
                        .HasName("long_text_answers_pkey");

                    b.HasIndex("AnswerId");

                    b.HasIndex("FormQuestionId");

                    b.ToTable("long_text_answers", (string)null);
                });

            modelBuilder.Entity("Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("question_types_pkey");

                    b.ToTable("question_types", (string)null);
                });

            modelBuilder.Entity("Models.ShortTextAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("answer");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<int?>("FormQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("form_question_id");

                    b.HasKey("Id")
                        .HasName("short_text_answers_pkey");

                    b.HasIndex("AnswerId");

                    b.HasIndex("FormQuestionId");

                    b.ToTable("short_text_answers", (string)null);
                });

            modelBuilder.Entity("Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("tags_pkey");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("topics_pkey");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("passwordhash");

                    b.Property<UserRole>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("role")
                        .HasDefaultValue(UserRole.user)
                        .HasColumnName("role");

                    b.Property<UserState>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValue(UserState.active)
                        .HasColumnName("state");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_idx")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Models.AccessformUser", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("AccessformUsers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("accessform_users_form_id_fkey");

                    b.HasOne("Models.User", "User")
                        .WithMany("AccessformUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("accessform_users_user_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.CheckboxAnswer", b =>
                {
                    b.HasOne("Models.FormAnswer", "AnswerNavigation")
                        .WithMany("CheckboxAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("checkbox_answers_answer_id_fkey");

                    b.HasOne("Models.FormQuestion", "FormQuestion")
                        .WithMany("CheckboxAnswers")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("checkbox_answers_form_question_id_fkey");

                    b.Navigation("AnswerNavigation");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("Comments")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_form_id_fkey");

                    b.HasOne("Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("comments_user_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Form", b =>
                {
                    b.HasOne("Models.Topic", "Topic")
                        .WithMany("Forms")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("forms_topic_id_fkey");

                    b.HasOne("Models.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("forms_user_id_fkey");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.FormAnswer", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("FormAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("form_answers_form_id_fkey");

                    b.HasOne("Models.User", "User")
                        .WithMany("FormAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("form_answers_user_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.FormQuestion", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("FormQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("form_questions_form_id_fkey");

                    b.HasOne("Models.QuestionType", "QuestionType")
                        .WithMany("FormQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("form_questions_question_type_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Models.FormQuestionOption", b =>
                {
                    b.HasOne("Models.FormQuestion", "FormQuestion")
                        .WithMany("FormQuestionOptions")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("form_question_options_form_question_id_fkey");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("Models.FormTag", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("FormTags")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("formtags_form_id_fkey");

                    b.HasOne("Models.Tag", "Tag")
                        .WithMany("FormTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("formtags_tag_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Models.IntegerAnswer", b =>
                {
                    b.HasOne("Models.FormAnswer", "AnswerNavigation")
                        .WithMany("IntegerAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("integer_answers_answer_id_fkey");

                    b.HasOne("Models.FormQuestion", "FormQuestion")
                        .WithMany("IntegerAnswers")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("integer_answers_form_question_id_fkey");

                    b.Navigation("AnswerNavigation");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("Models.Like", b =>
                {
                    b.HasOne("Models.Form", "Form")
                        .WithMany("Likes")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("likes_form_id_fkey");

                    b.HasOne("Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("likes_user_id_fkey");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.LongTextAnswer", b =>
                {
                    b.HasOne("Models.FormAnswer", "AnswerNavigation")
                        .WithMany("LongTextAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("long_text_answers_answer_id_fkey");

                    b.HasOne("Models.FormQuestion", "FormQuestion")
                        .WithMany("LongTextAnswers")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("long_text_answers_form_question_id_fkey");

                    b.Navigation("AnswerNavigation");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("Models.ShortTextAnswer", b =>
                {
                    b.HasOne("Models.FormAnswer", "AnswerNavigation")
                        .WithMany("ShortTextAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("short_text_answers_answer_id_fkey");

                    b.HasOne("Models.FormQuestion", "FormQuestion")
                        .WithMany("ShortTextAnswers")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("short_text_answers_form_question_id_fkey");

                    b.Navigation("AnswerNavigation");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("Models.Form", b =>
                {
                    b.Navigation("AccessformUsers");

                    b.Navigation("Comments");

                    b.Navigation("FormAnswers");

                    b.Navigation("FormQuestions");

                    b.Navigation("FormTags");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Models.FormAnswer", b =>
                {
                    b.Navigation("CheckboxAnswers");

                    b.Navigation("IntegerAnswers");

                    b.Navigation("LongTextAnswers");

                    b.Navigation("ShortTextAnswers");
                });

            modelBuilder.Entity("Models.FormQuestion", b =>
                {
                    b.Navigation("CheckboxAnswers");

                    b.Navigation("FormQuestionOptions");

                    b.Navigation("IntegerAnswers");

                    b.Navigation("LongTextAnswers");

                    b.Navigation("ShortTextAnswers");
                });

            modelBuilder.Entity("Models.QuestionType", b =>
                {
                    b.Navigation("FormQuestions");
                });

            modelBuilder.Entity("Models.Tag", b =>
                {
                    b.Navigation("FormTags");
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("AccessformUsers");

                    b.Navigation("Comments");

                    b.Navigation("FormAnswers");

                    b.Navigation("Forms");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
